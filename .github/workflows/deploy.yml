name: Deploy to Azure Container Apps

on:
  push:
    branches: [ main, master ]

concurrency:
  group: azure-deploy-${{ vars.AZURE_RESOURCE_GROUP }}-${{ github.workflow }}-blog-dynapt-com-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install
        run: npm ci
      - name: Build with branding environment variables
        run: npm run build
        env:
          NEXT_PUBLIC_ORG_NAME: ${{ secrets.NEXT_PUBLIC_ORG_NAME }}
          NEXT_PUBLIC_ORG_LOGO_URL: ${{ secrets.NEXT_PUBLIC_ORG_LOGO_URL }}
          NEXT_PUBLIC_PRIMARY_COLOR: ${{ secrets.NEXT_PUBLIC_PRIMARY_COLOR }}
          NEXT_PUBLIC_SECONDARY_COLOR: ${{ secrets.NEXT_PUBLIC_SECONDARY_COLOR }}
          NEXT_PUBLIC_BACKGROUND_COLOR: ${{ secrets.NEXT_PUBLIC_BACKGROUND_COLOR }}
          NEXT_PUBLIC_FOREGROUND_COLOR: ${{ secrets.NEXT_PUBLIC_FOREGROUND_COLOR }}
          NEXT_PUBLIC_SEO_TITLE: ${{ secrets.NEXT_PUBLIC_SEO_TITLE }}
          NEXT_PUBLIC_SEO_DESCRIPTION: ${{ secrets.NEXT_PUBLIC_SEO_DESCRIPTION }}
          NEXT_PUBLIC_SEO_KEYWORDS: ${{ secrets.NEXT_PUBLIC_SEO_KEYWORDS }}
      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Build and Push Image to ACR
        uses: azure/CLI@v2
        with:
          inlineScript: |
            az acr build --registry ${{ vars.AZURE_CONTAINER_REGISTRY_NAME }} --image blog-1758462860353-5m7s6iglf:${{ github.sha }} --file Dockerfile .
      - name: Deploy to Azure Container Apps
        uses: azure/CLI@v2
        with:
          inlineScript: |
            set -euo pipefail
            APP_NAME="blog-dynapt-com"
            RG=${{ vars.AZURE_RESOURCE_GROUP }}
            ACR_NAME=${{ vars.AZURE_CONTAINER_REGISTRY_NAME }}
            echo "Resolving ACR login server for $ACR_NAME..."
            LOGIN_SERVER=$(az acr show --name "$ACR_NAME" --query loginServer -o tsv)
            IMAGE="$LOGIN_SERVER/blog-1758462860353-5m7s6iglf:${{ github.sha }}"
            echo "Target image: $IMAGE"

            echo "Waiting for any active provisioning to complete for $APP_NAME..."
            attempts=60
            sleep_secs=10
            for i in $(seq 1 $attempts); do
              state=$(az containerapp show -n "$APP_NAME" -g "$RG" --query "properties.provisioningState" -o tsv || echo "")
              if [ -z "$state" ] || [ "$state" = "Succeeded" ]; then
                break
              fi
              echo "App state: $state. Waiting ($i/$attempts)..."
              sleep "$sleep_secs"
            done

            echo "Updating container app with retries..."
            retries=10
            backoff=5
            for i in $(seq 1 $retries); do
              if az containerapp update --name "$APP_NAME" --resource-group "$RG" --image "$IMAGE" --output none; then
                echo "Update succeeded."
                exit 0
              fi
              err_state=$(az containerapp show -n "$APP_NAME" -g "$RG" --query "properties.provisioningState" -o tsv || echo "")
              echo "Update failed (attempt $i/$retries). provisioningState=$err_state. Retrying in $backoff s..."
              sleep "$backoff"
              if [ $backoff -lt 60 ]; then backoff=$((backoff*2)); else backoff=60; fi
            done

            echo "Deployment failed after retries."
            exit 1
